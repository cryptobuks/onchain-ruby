=begin
#ONCHAIN.IO API overview

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module SwaggerClient
  class EthereumAPIApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create Unsigned Transaction
    # Create an unsigned transaction. OnChain returns the ethereum transaction in hex format along with a hash that would need to be signed.
    # @param to The address to send Ether to.
    # @param from The addresses we are sending ether from.
    # @param amount The amount we wish to send in GWEI.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :gas_price The gas price to pay.
    # @option opts [Integer] :gas_limit The gas limit to use.
    # @return [EthereumToSign]
    def create(to, from, amount, opts = {})
      data, _status_code, _headers = create_with_http_info(to, from, amount, opts)
      return data
    end

    # Create Unsigned Transaction
    # Create an unsigned transaction. OnChain returns the ethereum transaction in hex format along with a hash that would need to be signed.
    # @param to The address to send Ether to.
    # @param from The addresses we are sending ether from.
    # @param amount The amount we wish to send in GWEI.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :gas_price The gas price to pay.
    # @option opts [Integer] :gas_limit The gas limit to use.
    # @return [Array<(EthereumToSign, Fixnum, Hash)>] EthereumToSign data, response status code and response headers
    def create_with_http_info(to, from, amount, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EthereumAPIApi.create ..."
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling EthereumAPIApi.create"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling EthereumAPIApi.create"
      end
      # verify the required parameter 'amount' is set
      if @api_client.config.client_side_validation && amount.nil?
        fail ArgumentError, "Missing the required parameter 'amount' when calling EthereumAPIApi.create"
      end
      # resource path
      local_var_path = "/ethereum/create/"

      # query parameters
      query_params = {}
      query_params[:'to'] = to
      query_params[:'from'] = from
      query_params[:'amount'] = amount
      query_params[:'gas_price'] = opts[:'gas_price'] if !opts[:'gas_price'].nil?
      query_params[:'gas_limit'] = opts[:'gas_limit'] if !opts[:'gas_limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EthereumToSign')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EthereumAPIApi#create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sign and send transaction.
    # Sign and send transaction onto the Ethereum network.
    # @param to The address to send Ether to.
    # @param from The addresses we are sending ether from.
    # @param amount The amount we wish to send in GWEI.
    # @param r The signed r value.
    # @param s The signed r value.
    # @param v The signed r value.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :gas_price The gas price to pay.
    # @option opts [Integer] :gas_limit The gas limit to use.
    # @return [SendStatus]
    def sign_and_send(to, from, amount, r, s, v, opts = {})
      data, _status_code, _headers = sign_and_send_with_http_info(to, from, amount, r, s, v, opts)
      return data
    end

    # Sign and send transaction.
    # Sign and send transaction onto the Ethereum network.
    # @param to The address to send Ether to.
    # @param from The addresses we are sending ether from.
    # @param amount The amount we wish to send in GWEI.
    # @param r The signed r value.
    # @param s The signed r value.
    # @param v The signed r value.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :gas_price The gas price to pay.
    # @option opts [Integer] :gas_limit The gas limit to use.
    # @return [Array<(SendStatus, Fixnum, Hash)>] SendStatus data, response status code and response headers
    def sign_and_send_with_http_info(to, from, amount, r, s, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EthereumAPIApi.sign_and_send ..."
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling EthereumAPIApi.sign_and_send"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling EthereumAPIApi.sign_and_send"
      end
      # verify the required parameter 'amount' is set
      if @api_client.config.client_side_validation && amount.nil?
        fail ArgumentError, "Missing the required parameter 'amount' when calling EthereumAPIApi.sign_and_send"
      end
      # verify the required parameter 'r' is set
      if @api_client.config.client_side_validation && r.nil?
        fail ArgumentError, "Missing the required parameter 'r' when calling EthereumAPIApi.sign_and_send"
      end
      # verify the required parameter 's' is set
      if @api_client.config.client_side_validation && s.nil?
        fail ArgumentError, "Missing the required parameter 's' when calling EthereumAPIApi.sign_and_send"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling EthereumAPIApi.sign_and_send"
      end
      # resource path
      local_var_path = "/ethereum/sign_and_send/"

      # query parameters
      query_params = {}
      query_params[:'to'] = to
      query_params[:'from'] = from
      query_params[:'amount'] = amount
      query_params[:'r'] = r
      query_params[:'s'] = s
      query_params[:'v'] = v
      query_params[:'gas_price'] = opts[:'gas_price'] if !opts[:'gas_price'].nil?
      query_params[:'gas_limit'] = opts[:'gas_limit'] if !opts[:'gas_limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SendStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EthereumAPIApi#sign_and_send\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
