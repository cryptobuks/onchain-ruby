=begin
#ONCHAIN.IO API overview

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module SwaggerClient
  class ExchangeApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create trade.
    # Create the trade and get a deposit address.
    # @param from 
    # @param to 
    # @param amount The amount to exchange.
    # @param identifier Connect the history together.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponseDefault1]
    def create_trade(from, to, amount, identifier, opts = {})
      data, _status_code, _headers = create_trade_with_http_info(from, to, amount, identifier, opts)
      return data
    end

    # Create trade.
    # Create the trade and get a deposit address.
    # @param from 
    # @param to 
    # @param amount The amount to exchange.
    # @param identifier Connect the history together.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponseDefault1, Fixnum, Hash)>] InlineResponseDefault1 data, response status code and response headers
    def create_trade_with_http_info(from, to, amount, identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeApi.create_trade ..."
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling ExchangeApi.create_trade"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling ExchangeApi.create_trade"
      end
      # verify the required parameter 'amount' is set
      if @api_client.config.client_side_validation && amount.nil?
        fail ArgumentError, "Missing the required parameter 'amount' when calling ExchangeApi.create_trade"
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling ExchangeApi.create_trade"
      end
      # resource path
      local_var_path = "/exchange/create_trade/"

      # query parameters
      query_params = {}
      query_params[:'from'] = from
      query_params[:'to'] = to
      query_params[:'amount'] = amount
      query_params[:'identifier'] = identifier

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponseDefault1')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeApi#create_trade\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get rates.
    # Get current exchange rate for currencies.
    # @param coins Comma separated list of coins
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_rates(coins, opts = {})
      data, _status_code, _headers = get_rates_with_http_info(coins, opts)
      return data
    end

    # Get rates.
    # Get current exchange rate for currencies.
    # @param coins Comma separated list of coins
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def get_rates_with_http_info(coins, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeApi.get_rates ..."
      end
      # verify the required parameter 'coins' is set
      if @api_client.config.client_side_validation && coins.nil?
        fail ArgumentError, "Missing the required parameter 'coins' when calling ExchangeApi.get_rates"
      end
      # resource path
      local_var_path = "/exchange/get_rates/{coins}".sub('{' + 'coins' + '}', coins.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeApi#get_rates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verify trade.
    # Can we make the requested trade?
    # @param from 
    # @param to 
    # @param amount The amount to exchange.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponseDefault2]
    def verify_trade(from, to, amount, opts = {})
      data, _status_code, _headers = verify_trade_with_http_info(from, to, amount, opts)
      return data
    end

    # Verify trade.
    # Can we make the requested trade?
    # @param from 
    # @param to 
    # @param amount The amount to exchange.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponseDefault2, Fixnum, Hash)>] InlineResponseDefault2 data, response status code and response headers
    def verify_trade_with_http_info(from, to, amount, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExchangeApi.verify_trade ..."
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling ExchangeApi.verify_trade"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling ExchangeApi.verify_trade"
      end
      # verify the required parameter 'amount' is set
      if @api_client.config.client_side_validation && amount.nil?
        fail ArgumentError, "Missing the required parameter 'amount' when calling ExchangeApi.verify_trade"
      end
      # resource path
      local_var_path = "/exchange/verify_trade/"

      # query parameters
      query_params = {}
      query_params[:'from'] = from
      query_params[:'to'] = to
      query_params[:'amount'] = amount

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponseDefault2')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExchangeApi#verify_trade\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
